#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BIRD 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4

// &lt {
//     quick_tap_ms = <170>;
// };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
        macro_qu: macro_qu {
            label = "Macro_qu";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                &macro_tap &kp Q
                &macro_release &kp LSHIFT
                &macro_tap &kp U
            >;
        };
    };
};


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
    
};

#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

/ {
    combos {
        compatible = "zmk,combos";
/* nav layer combo */
        COMBO(nav, &mo NAV, 18 26)
/* usually on base layer */
        COMBO(z, &kp Z, 19 20)
        COMBO(v, &kp V, 0 1)
        COMBO(smart_qu, &smart_qu Q 0, 1 2)
        COMBO(slash, &kp SLASH, 23 24)
        COMBO(enter, &kp ENTER, 22 24)
        COMBO(esc, &kp ESC, 19 10 21)
        COMBO(tab, &kp TAB, 19 21)
/* parentheticals */
        COMBO(lbrc, &kp LBRC, 0 9)
        COMBO(lbkt, &kp LBKT, 1 10)
        COMBO(lpar, &kp LPAR, 2 11)
        COMBO(lt, &kp LT, 3 12)
        COMBO(gt, &kp GT, 4 13)
        COMBO(rpar, &kp RPAR, 5 14)
        COMBO(rbkt, &kp RBKT, 6 15)
        COMBO(rbrc, &kp RBRC, 7 16)
/* caps */
        COMBO(capslock, &kp CAPSLOCK, 0 7)
/* deletion */
        COMBO(del, &kp DEL, 6 7)
        COMBO(delword, &kp LC(BSPC), 5 7)
    };
};


/ {

    behaviors {
        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "my layer taps";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&mo &kp>, <&kp>;
            // non-thumb keys
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25>;
        };

        smart_qu: smart_qu_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&macro_qu>;
        };
//   ____________________________  ____________________________
//  /       0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7      \
// |  8  |  9  | 10  | 11  | 12  /\  13 |  14 |  15 |  16 | 17  |
// | 18  | 19  | 20  | 21       /  \       22 |  23 |  24 | 25  |
//                      \  26  /    \  27  /
//                       ------      ------


        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};


//   ____________________________  ____________________________
//  /       0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7      \
// |  8  |  9  | 10  | 11  | 12  /\  13 |  14 |  15 |  16 | 17  |
// | 19  | 19  | 20  | 21       /  \       22 |  23 |  24 | 25  |
//                      \  26  /    \  27  /
//                       ------      ------

/ {

    keymap {
        compatible = "zmk,keymap";

        bird {
            label = "BIRD";

            bindings = <
                        &kp C   &kp L   &kp F   &kp P      &kp K   &kp Y   &kp O   &kp U
                &kp R   &kp S   &kp N   &kp T   &kp B      &kp J   &kp H   &kp E   &kp I   &kp A
           &my_lt NUM X &kp W   &kp M   &kp G                      &kp D   &comsem &dotcol &my_lt SYM SQT
                                          &kp SPACE &kp LSHIFT
            >;
        };
        numbers {
            label = "NUM";

            bindings = <
                        &none      &sk LGUI    &none       &none      &none   &kp N7   &kp N8   &kp N9
                &none   &sk LALT   &sk LCTRL   &sk LSHFT   &none      &none   &kp N4   &kp N5   &kp N6   &none
                &trans  &none &sk LC(LS(LALT)) &none                          &kp N1   &kp N2   &kp N3   &trans
                                                          &trans      &kp N0
            >;
        };
        symbols {
            label = "SYM";

            bindings = <
                        &kp EXCL   &kp DLLR    &kp GRAVE   &none      &none   &kp FSLH    &kp UNDER   &kp AT
                &none   &kp BSLH   &kp MINUS   &kp HASH    &none      &none   &kp PRCNT   &kp EQUAL   &kp PIPE   &none
                &trans  &kp COLON  &kp STAR    &kp PLUS                       &kp AMPS    &kp CARET   &kp TILDE  &trans
                                                        &trans       &kp BSPC
            >;
        };
        navigation {
            label = "NAV";

            bindings = <
                        &none     &sk LGUI     &kp TAB     &none      &none   &kp PG_UP   &kp UP     &kp PG_DN
                &none   &sk LALT  &sk LCTRL    &sk LSHFT   &none      &none   &kp LEFT    &kp DOWN   &kp RIGHT   &none
                &trans  &none &sk LC(LS(LALT)) &none                          &kp HOME    &kp INS    &kp END     &trans
                                                       &trans         &trans
            >;
        };
        function {
            label = "FUN";

            bindings = <
                               &bootloader    &trans         &trans         &trans         &kp F12        &kp F7         &kp F8         &kp F9
                &trans         &trans         &trans         &trans         &trans         &kp F11        &kp F4         &kp F5         &kp F6         &kp F10
                &trans         &trans         &trans         &trans                                       &kp F1         &kp F2         &kp F3         &trans
                                                                            &trans         &trans
            >;
        };

    };
};
